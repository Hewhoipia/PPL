# Generated from /Users/thong/WorkSpace/PPL/Ass1/src/main/zcode/parser/ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,45,440,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,1,0,1,0,1,0,
        1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,
        1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
        1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,
        11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,
        16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,
        18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,
        22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,3,27,257,8,27,1,
        27,1,27,1,27,3,27,262,8,27,3,27,264,8,27,1,28,1,28,1,28,1,29,1,29,
        1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,
        1,35,1,35,1,36,1,36,1,37,4,37,289,8,37,11,37,12,37,290,1,37,1,37,
        4,37,295,8,37,11,37,12,37,296,3,37,299,8,37,1,37,3,37,302,8,37,1,
        38,1,38,3,38,306,8,38,1,39,1,39,1,39,1,39,1,39,3,39,313,8,39,1,40,
        1,40,1,40,1,40,3,40,319,8,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,
        1,44,1,45,1,45,3,45,331,8,45,1,46,1,46,5,46,335,8,46,10,46,12,46,
        338,9,46,1,46,1,46,1,46,1,47,1,47,3,47,345,8,47,1,47,1,47,1,47,5,
        47,350,8,47,10,47,12,47,353,9,47,1,48,1,48,1,49,1,49,1,50,1,50,1,
        51,1,51,3,51,363,8,51,1,51,4,51,366,8,51,11,51,12,51,367,1,52,1,
        52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,57,3,57,383,
        8,57,1,58,1,58,1,58,1,59,1,59,1,59,1,59,5,59,392,8,59,10,59,12,59,
        395,9,59,1,59,1,59,1,60,4,60,400,8,60,11,60,12,60,401,1,60,1,60,
        1,61,1,61,5,61,408,8,61,10,61,12,61,411,9,61,1,61,3,61,414,8,61,
        1,61,1,61,1,62,1,62,5,62,420,8,62,10,62,12,62,423,9,62,1,62,1,62,
        3,62,427,8,62,1,62,5,62,430,8,62,10,62,12,62,433,9,62,1,62,1,62,
        1,62,1,63,1,63,1,63,2,393,431,0,64,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,0,79,0,
        81,0,83,0,85,0,87,0,89,0,91,0,93,39,95,40,97,0,99,0,101,0,103,0,
        105,0,107,0,109,0,111,0,113,0,115,0,117,0,119,41,121,42,123,43,125,
        44,127,45,1,0,13,2,0,60,60,62,62,6,0,39,39,92,92,98,98,102,102,114,
        114,116,116,1,0,34,34,5,0,8,10,12,13,34,34,39,39,92,92,2,0,65,90,
        97,122,1,0,97,122,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,1,
        0,39,39,2,0,9,9,32,32,1,1,10,10,1,0,92,92,448,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
        0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
        0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
        0,0,0,75,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,119,1,0,0,0,0,121,1,
        0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,1,129,1,0,0,0,3,
        134,1,0,0,0,5,140,1,0,0,0,7,147,1,0,0,0,9,152,1,0,0,0,11,159,1,0,
        0,0,13,166,1,0,0,0,15,170,1,0,0,0,17,178,1,0,0,0,19,183,1,0,0,0,
        21,187,1,0,0,0,23,193,1,0,0,0,25,196,1,0,0,0,27,202,1,0,0,0,29,211,
        1,0,0,0,31,214,1,0,0,0,33,219,1,0,0,0,35,224,1,0,0,0,37,230,1,0,
        0,0,39,234,1,0,0,0,41,238,1,0,0,0,43,242,1,0,0,0,45,245,1,0,0,0,
        47,247,1,0,0,0,49,249,1,0,0,0,51,251,1,0,0,0,53,253,1,0,0,0,55,263,
        1,0,0,0,57,265,1,0,0,0,59,268,1,0,0,0,61,271,1,0,0,0,63,275,1,0,
        0,0,65,277,1,0,0,0,67,279,1,0,0,0,69,281,1,0,0,0,71,283,1,0,0,0,
        73,285,1,0,0,0,75,288,1,0,0,0,77,305,1,0,0,0,79,312,1,0,0,0,81,318,
        1,0,0,0,83,320,1,0,0,0,85,322,1,0,0,0,87,324,1,0,0,0,89,326,1,0,
        0,0,91,330,1,0,0,0,93,332,1,0,0,0,95,344,1,0,0,0,97,354,1,0,0,0,
        99,356,1,0,0,0,101,358,1,0,0,0,103,360,1,0,0,0,105,369,1,0,0,0,107,
        371,1,0,0,0,109,373,1,0,0,0,111,375,1,0,0,0,113,377,1,0,0,0,115,
        382,1,0,0,0,117,384,1,0,0,0,119,387,1,0,0,0,121,399,1,0,0,0,123,
        405,1,0,0,0,125,417,1,0,0,0,127,437,1,0,0,0,129,130,5,116,0,0,130,
        131,5,114,0,0,131,132,5,117,0,0,132,133,5,101,0,0,133,2,1,0,0,0,
        134,135,5,102,0,0,135,136,5,97,0,0,136,137,5,108,0,0,137,138,5,115,
        0,0,138,139,5,101,0,0,139,4,1,0,0,0,140,141,5,110,0,0,141,142,5,
        117,0,0,142,143,5,109,0,0,143,144,5,98,0,0,144,145,5,101,0,0,145,
        146,5,114,0,0,146,6,1,0,0,0,147,148,5,98,0,0,148,149,5,111,0,0,149,
        150,5,111,0,0,150,151,5,108,0,0,151,8,1,0,0,0,152,153,5,115,0,0,
        153,154,5,116,0,0,154,155,5,114,0,0,155,156,5,105,0,0,156,157,5,
        110,0,0,157,158,5,103,0,0,158,10,1,0,0,0,159,160,5,114,0,0,160,161,
        5,101,0,0,161,162,5,116,0,0,162,163,5,117,0,0,163,164,5,114,0,0,
        164,165,5,110,0,0,165,12,1,0,0,0,166,167,5,118,0,0,167,168,5,97,
        0,0,168,169,5,114,0,0,169,14,1,0,0,0,170,171,5,100,0,0,171,172,5,
        121,0,0,172,173,5,110,0,0,173,174,5,97,0,0,174,175,5,109,0,0,175,
        176,5,105,0,0,176,177,5,99,0,0,177,16,1,0,0,0,178,179,5,102,0,0,
        179,180,5,117,0,0,180,181,5,110,0,0,181,182,5,99,0,0,182,18,1,0,
        0,0,183,184,5,102,0,0,184,185,5,111,0,0,185,186,5,114,0,0,186,20,
        1,0,0,0,187,188,5,117,0,0,188,189,5,110,0,0,189,190,5,116,0,0,190,
        191,5,105,0,0,191,192,5,108,0,0,192,22,1,0,0,0,193,194,5,98,0,0,
        194,195,5,121,0,0,195,24,1,0,0,0,196,197,5,98,0,0,197,198,5,114,
        0,0,198,199,5,101,0,0,199,200,5,97,0,0,200,201,5,107,0,0,201,26,
        1,0,0,0,202,203,5,99,0,0,203,204,5,111,0,0,204,205,5,110,0,0,205,
        206,5,116,0,0,206,207,5,105,0,0,207,208,5,110,0,0,208,209,5,117,
        0,0,209,210,5,101,0,0,210,28,1,0,0,0,211,212,5,105,0,0,212,213,5,
        102,0,0,213,30,1,0,0,0,214,215,5,101,0,0,215,216,5,108,0,0,216,217,
        5,115,0,0,217,218,5,101,0,0,218,32,1,0,0,0,219,220,5,101,0,0,220,
        221,5,108,0,0,221,222,5,105,0,0,222,223,5,102,0,0,223,34,1,0,0,0,
        224,225,5,98,0,0,225,226,5,101,0,0,226,227,5,103,0,0,227,228,5,105,
        0,0,228,229,5,110,0,0,229,36,1,0,0,0,230,231,5,101,0,0,231,232,5,
        110,0,0,232,233,5,100,0,0,233,38,1,0,0,0,234,235,5,110,0,0,235,236,
        5,111,0,0,236,237,5,116,0,0,237,40,1,0,0,0,238,239,5,97,0,0,239,
        240,5,110,0,0,240,241,5,100,0,0,241,42,1,0,0,0,242,243,5,111,0,0,
        243,244,5,114,0,0,244,44,1,0,0,0,245,246,5,43,0,0,246,46,1,0,0,0,
        247,248,5,45,0,0,248,48,1,0,0,0,249,250,5,42,0,0,250,50,1,0,0,0,
        251,252,5,47,0,0,252,52,1,0,0,0,253,254,5,37,0,0,254,54,1,0,0,0,
        255,257,5,33,0,0,256,255,1,0,0,0,256,257,1,0,0,0,257,258,1,0,0,0,
        258,264,5,61,0,0,259,261,7,0,0,0,260,262,5,61,0,0,261,260,1,0,0,
        0,261,262,1,0,0,0,262,264,1,0,0,0,263,256,1,0,0,0,263,259,1,0,0,
        0,264,56,1,0,0,0,265,266,5,61,0,0,266,267,5,61,0,0,267,58,1,0,0,
        0,268,269,5,60,0,0,269,270,5,45,0,0,270,60,1,0,0,0,271,272,5,46,
        0,0,272,273,5,46,0,0,273,274,5,46,0,0,274,62,1,0,0,0,275,276,5,40,
        0,0,276,64,1,0,0,0,277,278,5,41,0,0,278,66,1,0,0,0,279,280,5,91,
        0,0,280,68,1,0,0,0,281,282,5,93,0,0,282,70,1,0,0,0,283,284,5,44,
        0,0,284,72,1,0,0,0,285,286,5,10,0,0,286,74,1,0,0,0,287,289,3,101,
        50,0,288,287,1,0,0,0,289,290,1,0,0,0,290,288,1,0,0,0,290,291,1,0,
        0,0,291,298,1,0,0,0,292,294,5,46,0,0,293,295,3,101,50,0,294,293,
        1,0,0,0,295,296,1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,299,
        1,0,0,0,298,292,1,0,0,0,298,299,1,0,0,0,299,301,1,0,0,0,300,302,
        3,103,51,0,301,300,1,0,0,0,301,302,1,0,0,0,302,76,1,0,0,0,303,306,
        3,79,39,0,304,306,3,81,40,0,305,303,1,0,0,0,305,304,1,0,0,0,306,
        78,1,0,0,0,307,313,3,107,53,0,308,313,3,109,54,0,309,313,3,111,55,
        0,310,313,3,113,56,0,311,313,3,117,58,0,312,307,1,0,0,0,312,308,
        1,0,0,0,312,309,1,0,0,0,312,310,1,0,0,0,312,311,1,0,0,0,313,80,1,
        0,0,0,314,315,3,115,57,0,315,316,3,105,52,0,316,319,1,0,0,0,317,
        319,3,115,57,0,318,314,1,0,0,0,318,317,1,0,0,0,319,82,1,0,0,0,320,
        321,7,1,0,0,321,84,1,0,0,0,322,323,7,2,0,0,323,86,1,0,0,0,324,325,
        8,1,0,0,325,88,1,0,0,0,326,327,8,2,0,0,327,90,1,0,0,0,328,331,8,
        3,0,0,329,331,3,77,38,0,330,328,1,0,0,0,330,329,1,0,0,0,331,92,1,
        0,0,0,332,336,3,105,52,0,333,335,3,91,45,0,334,333,1,0,0,0,335,338,
        1,0,0,0,336,334,1,0,0,0,336,337,1,0,0,0,337,339,1,0,0,0,338,336,
        1,0,0,0,339,340,3,105,52,0,340,341,6,46,0,0,341,94,1,0,0,0,342,345,
        3,97,48,0,343,345,5,95,0,0,344,342,1,0,0,0,344,343,1,0,0,0,345,351,
        1,0,0,0,346,350,3,97,48,0,347,350,3,101,50,0,348,350,5,95,0,0,349,
        346,1,0,0,0,349,347,1,0,0,0,349,348,1,0,0,0,350,353,1,0,0,0,351,
        349,1,0,0,0,351,352,1,0,0,0,352,96,1,0,0,0,353,351,1,0,0,0,354,355,
        7,4,0,0,355,98,1,0,0,0,356,357,7,5,0,0,357,100,1,0,0,0,358,359,7,
        6,0,0,359,102,1,0,0,0,360,362,7,7,0,0,361,363,7,8,0,0,362,361,1,
        0,0,0,362,363,1,0,0,0,363,365,1,0,0,0,364,366,3,101,50,0,365,364,
        1,0,0,0,366,367,1,0,0,0,367,365,1,0,0,0,367,368,1,0,0,0,368,104,
        1,0,0,0,369,370,5,34,0,0,370,106,1,0,0,0,371,372,5,8,0,0,372,108,
        1,0,0,0,373,374,5,12,0,0,374,110,1,0,0,0,375,376,5,13,0,0,376,112,
        1,0,0,0,377,378,5,9,0,0,378,114,1,0,0,0,379,380,5,92,0,0,380,383,
        7,9,0,0,381,383,7,9,0,0,382,379,1,0,0,0,382,381,1,0,0,0,383,116,
        1,0,0,0,384,385,5,92,0,0,385,386,5,92,0,0,386,118,1,0,0,0,387,388,
        5,35,0,0,388,389,5,35,0,0,389,393,1,0,0,0,390,392,9,0,0,0,391,390,
        1,0,0,0,392,395,1,0,0,0,393,394,1,0,0,0,393,391,1,0,0,0,394,396,
        1,0,0,0,395,393,1,0,0,0,396,397,6,59,1,0,397,120,1,0,0,0,398,400,
        7,10,0,0,399,398,1,0,0,0,400,401,1,0,0,0,401,399,1,0,0,0,401,402,
        1,0,0,0,402,403,1,0,0,0,403,404,6,60,1,0,404,122,1,0,0,0,405,409,
        3,105,52,0,406,408,3,91,45,0,407,406,1,0,0,0,408,411,1,0,0,0,409,
        407,1,0,0,0,409,410,1,0,0,0,410,413,1,0,0,0,411,409,1,0,0,0,412,
        414,7,11,0,0,413,412,1,0,0,0,414,415,1,0,0,0,415,416,6,61,2,0,416,
        124,1,0,0,0,417,421,3,105,52,0,418,420,3,91,45,0,419,418,1,0,0,0,
        420,423,1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,424,1,0,0,0,
        423,421,1,0,0,0,424,426,7,12,0,0,425,427,3,87,43,0,426,425,1,0,0,
        0,426,427,1,0,0,0,427,431,1,0,0,0,428,430,9,0,0,0,429,428,1,0,0,
        0,430,433,1,0,0,0,431,432,1,0,0,0,431,429,1,0,0,0,432,434,1,0,0,
        0,433,431,1,0,0,0,434,435,3,105,52,0,435,436,6,62,3,0,436,126,1,
        0,0,0,437,438,9,0,0,0,438,439,6,63,4,0,439,128,1,0,0,0,26,0,256,
        261,263,290,296,298,301,305,312,318,330,336,344,349,351,362,367,
        382,393,401,409,413,421,426,431,5,1,46,0,6,0,0,1,61,1,1,62,2,1,63,
        3
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TRUE = 1
    FALSE = 2
    KWNUMBER = 3
    KWBOOL = 4
    KWSTRING = 5
    RETURN = 6
    VAR = 7
    DYNAMIC = 8
    FUNC = 9
    FOR = 10
    UNTIL = 11
    BY = 12
    BREAK = 13
    CONTINUE = 14
    IF = 15
    ELSE = 16
    ELIF = 17
    BEGIN = 18
    END = 19
    NOT = 20
    AND = 21
    OR = 22
    ADD = 23
    SUB = 24
    MUL = 25
    DIV = 26
    MOD = 27
    COMPARENUM = 28
    COMPARESTR = 29
    ASSIGN = 30
    CONCAT = 31
    OPENPAREN = 32
    CLOSEPAREN = 33
    OPENSQBRACKET = 34
    CLOSESQBRACKET = 35
    COMMA = 36
    NEWLINE = 37
    NUMBER = 38
    STRING = 39
    IDENTIFIER = 40
    CMT = 41
    WS = 42
    UNCLOSE_STRING = 43
    ILLEGAL_ESCAPE = 44
    ERROR_CHAR = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'true'", "'false'", "'number'", "'bool'", "'string'", "'return'", 
            "'var'", "'dynamic'", "'func'", "'for'", "'until'", "'by'", 
            "'break'", "'continue'", "'if'", "'else'", "'elif'", "'begin'", 
            "'end'", "'not'", "'and'", "'or'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'=='", "'<-'", "'...'", "'('", "')'", "'['", "']'", 
            "','", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "TRUE", "FALSE", "KWNUMBER", "KWBOOL", "KWSTRING", "RETURN", 
            "VAR", "DYNAMIC", "FUNC", "FOR", "UNTIL", "BY", "BREAK", "CONTINUE", 
            "IF", "ELSE", "ELIF", "BEGIN", "END", "NOT", "AND", "OR", "ADD", 
            "SUB", "MUL", "DIV", "MOD", "COMPARENUM", "COMPARESTR", "ASSIGN", 
            "CONCAT", "OPENPAREN", "CLOSEPAREN", "OPENSQBRACKET", "CLOSESQBRACKET", 
            "COMMA", "NEWLINE", "NUMBER", "STRING", "IDENTIFIER", "CMT", 
            "WS", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    ruleNames = [ "TRUE", "FALSE", "KWNUMBER", "KWBOOL", "KWSTRING", "RETURN", 
                  "VAR", "DYNAMIC", "FUNC", "FOR", "UNTIL", "BY", "BREAK", 
                  "CONTINUE", "IF", "ELSE", "ELIF", "BEGIN", "END", "NOT", 
                  "AND", "OR", "ADD", "SUB", "MUL", "DIV", "MOD", "COMPARENUM", 
                  "COMPARESTR", "ASSIGN", "CONCAT", "OPENPAREN", "CLOSEPAREN", 
                  "OPENSQBRACKET", "CLOSESQBRACKET", "COMMA", "NEWLINE", 
                  "NUMBER", "ES", "ES_BACKSLASH", "ES_SINGLEQUOTE", "POSTFIX_ES_BACKSLASH", 
                  "POSTFIX_ES_SINGLEQUOTE", "NOT_POSTFIX_ES_BACKSLASH", 
                  "NOT_POSTFIX_ES_SINGLEQUOTE", "STRING_CHAR", "STRING", 
                  "IDENTIFIER", "Char", "LowChar", "Num", "Expo", "DoubleQuote", 
                  "BACKSPACE", "FORMFEED", "CR", "TAB", "SINGLEQUOTE", "BACKSLASH", 
                  "CMT", "WS", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[46] = self.STRING_action 
            actions[61] = self.UNCLOSE_STRING_action 
            actions[62] = self.ILLEGAL_ESCAPE_action 
            actions[63] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:-1]
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:

                text_normalized = self.text.replace('\r\n', '\n')
                raise UncloseString(text_normalized[1:])

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

                for x in range(len(self.text)):
                    if self.text[x] == '\\':
                        if (self.text[x+1] == 'b') or (self.text[x+1] == 'f') or (self.text[x+1] == 'r'):
                            continue
                        elif (self.text[x+1] == 'n') or (self.text[x+1] == 't') or (self.text[x+1] == '\'') or (self.text[x+1] == '\\'):
                            continue
                        elif (x+2)==(len(self.text)):
                            x=x-1
                            break
                        else:
                            break
                    elif self.text[x] == '\'':
                        if(self.text[x+1] == '"'):
                            continue 
                        elif (x+2)==(len(self.text)):
                            x=x-1
                            break
                        else:
                            break                                      
                raise IllegalEscape(self.text[1:x+2])

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            raise ErrorToken(self.text)
     


