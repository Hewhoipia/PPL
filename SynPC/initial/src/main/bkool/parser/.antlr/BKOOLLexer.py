# Generated from /Users/thong/WorkSpace/PPL/SynPC/initial/src/main/bkool/parser/BKOOL.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,18,124,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,
        4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,5,14,83,8,14,10,
        14,12,14,86,9,14,1,15,4,15,89,8,15,11,15,12,15,90,1,15,1,15,4,15,
        95,8,15,11,15,12,15,96,3,15,99,8,15,1,15,3,15,102,8,15,1,16,1,16,
        1,17,1,17,3,17,108,8,17,1,17,4,17,111,8,17,11,17,12,17,112,1,18,
        4,18,116,8,18,11,18,12,18,117,1,18,1,18,1,19,1,19,1,19,0,0,20,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,0,35,0,37,17,39,18,1,0,6,2,0,65,90,97,122,3,0,
        48,57,65,90,97,122,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,3,
        0,9,10,13,13,32,32,129,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
        0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
        0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
        0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,1,41,1,
        0,0,0,3,43,1,0,0,0,5,47,1,0,0,0,7,53,1,0,0,0,9,55,1,0,0,0,11,57,
        1,0,0,0,13,59,1,0,0,0,15,61,1,0,0,0,17,63,1,0,0,0,19,65,1,0,0,0,
        21,72,1,0,0,0,23,74,1,0,0,0,25,76,1,0,0,0,27,78,1,0,0,0,29,80,1,
        0,0,0,31,88,1,0,0,0,33,103,1,0,0,0,35,105,1,0,0,0,37,115,1,0,0,0,
        39,121,1,0,0,0,41,42,5,59,0,0,42,2,1,0,0,0,43,44,5,105,0,0,44,45,
        5,110,0,0,45,46,5,116,0,0,46,4,1,0,0,0,47,48,5,102,0,0,48,49,5,108,
        0,0,49,50,5,111,0,0,50,51,5,97,0,0,51,52,5,116,0,0,52,6,1,0,0,0,
        53,54,5,44,0,0,54,8,1,0,0,0,55,56,5,40,0,0,56,10,1,0,0,0,57,58,5,
        41,0,0,58,12,1,0,0,0,59,60,5,123,0,0,60,14,1,0,0,0,61,62,5,125,0,
        0,62,16,1,0,0,0,63,64,5,61,0,0,64,18,1,0,0,0,65,66,5,114,0,0,66,
        67,5,101,0,0,67,68,5,116,0,0,68,69,5,117,0,0,69,70,5,114,0,0,70,
        71,5,110,0,0,71,20,1,0,0,0,72,73,5,43,0,0,73,22,1,0,0,0,74,75,5,
        45,0,0,75,24,1,0,0,0,76,77,5,42,0,0,77,26,1,0,0,0,78,79,5,47,0,0,
        79,28,1,0,0,0,80,84,7,0,0,0,81,83,7,1,0,0,82,81,1,0,0,0,83,86,1,
        0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,30,1,0,0,0,86,84,1,0,0,0,87,
        89,3,33,16,0,88,87,1,0,0,0,89,90,1,0,0,0,90,88,1,0,0,0,90,91,1,0,
        0,0,91,98,1,0,0,0,92,94,5,46,0,0,93,95,3,33,16,0,94,93,1,0,0,0,95,
        96,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,99,1,0,0,0,98,92,1,0,0,
        0,98,99,1,0,0,0,99,101,1,0,0,0,100,102,3,35,17,0,101,100,1,0,0,0,
        101,102,1,0,0,0,102,32,1,0,0,0,103,104,7,2,0,0,104,34,1,0,0,0,105,
        107,7,3,0,0,106,108,7,4,0,0,107,106,1,0,0,0,107,108,1,0,0,0,108,
        110,1,0,0,0,109,111,3,33,16,0,110,109,1,0,0,0,111,112,1,0,0,0,112,
        110,1,0,0,0,112,113,1,0,0,0,113,36,1,0,0,0,114,116,7,5,0,0,115,114,
        1,0,0,0,116,117,1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,119,
        1,0,0,0,119,120,6,18,0,0,120,38,1,0,0,0,121,122,9,0,0,0,122,123,
        6,19,1,0,123,40,1,0,0,0,9,0,84,90,96,98,101,107,112,117,2,6,0,0,
        1,19,0
    ]

class BKOOLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    ID = 15
    NUMBER = 16
    WS = 17
    ERROR_CHAR = 18

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'int'", "'float'", "','", "'('", "')'", "'{'", "'}'", 
            "'='", "'return'", "'+'", "'-'", "'*'", "'/'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUMBER", "WS", "ERROR_CHAR" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "ID", "NUMBER", "Num", "Expo", "WS", "ERROR_CHAR" ]

    grammarFileName = "BKOOL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[19] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            raise ErrorToken(self.text)
     


