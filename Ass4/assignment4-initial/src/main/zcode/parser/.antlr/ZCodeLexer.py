# Generated from d:/Code/HK232/PPL/Ass4/assignment4-initial/src/main/zcode/parser/ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


# 2153043
from lexererr import *


def serializedATN():
    return [
        4,0,52,393,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,1,0,1,
        0,3,0,120,8,0,1,0,3,0,123,8,0,1,1,4,1,126,8,1,11,1,12,1,127,1,2,
        1,2,5,2,132,8,2,10,2,12,2,135,9,2,1,3,1,3,3,3,139,8,3,1,3,4,3,142,
        8,3,11,3,12,3,143,1,4,1,4,5,4,148,8,4,10,4,12,4,151,9,4,1,4,1,4,
        1,4,1,5,1,5,5,5,158,8,5,10,5,12,5,161,9,5,1,5,1,5,3,5,165,8,5,1,
        5,1,5,1,6,1,6,5,6,171,8,6,10,6,12,6,174,9,6,1,6,1,6,1,6,1,7,1,7,
        3,7,181,8,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,
        1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
        1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,
        1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,
        1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,
        1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,30,
        1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,
        1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,41,
        1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,45,1,45,1,46,
        1,46,1,47,1,47,1,48,1,48,1,49,1,49,5,49,346,8,49,10,49,12,49,349,
        9,49,1,50,1,50,1,50,1,50,5,50,355,8,50,10,50,12,50,358,9,50,1,50,
        1,50,1,51,1,51,1,52,1,52,1,52,1,52,1,53,4,53,369,8,53,11,53,12,53,
        370,1,53,1,53,1,54,1,54,3,54,377,8,54,1,55,1,55,1,55,1,55,3,55,383,
        8,55,1,56,1,56,1,56,1,56,3,56,389,8,56,1,57,1,57,1,57,3,149,159,
        172,0,58,1,1,3,0,5,0,7,0,9,2,11,3,13,4,15,5,17,6,19,7,21,8,23,9,
        25,10,27,11,29,12,31,13,33,14,35,15,37,16,39,17,41,18,43,19,45,20,
        47,21,49,22,51,23,53,24,55,25,57,26,59,27,61,28,63,29,65,30,67,31,
        69,32,71,33,73,34,75,35,77,36,79,37,81,38,83,39,85,40,87,41,89,42,
        91,43,93,44,95,45,97,46,99,47,101,48,103,49,105,50,107,51,109,0,
        111,0,113,0,115,52,1,0,10,1,0,48,57,2,0,69,69,101,101,2,0,43,43,
        45,45,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,10,
        10,3,0,8,9,12,12,32,32,3,0,10,10,34,34,92,92,8,0,32,32,39,39,92,
        92,98,98,102,102,110,110,114,114,116,116,1,0,34,34,403,0,1,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
        0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
        0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
        0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
        0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,
        0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,
        0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,
        0,0,0,0,115,1,0,0,0,1,117,1,0,0,0,3,125,1,0,0,0,5,129,1,0,0,0,7,
        136,1,0,0,0,9,145,1,0,0,0,11,155,1,0,0,0,13,168,1,0,0,0,15,180,1,
        0,0,0,17,182,1,0,0,0,19,187,1,0,0,0,21,193,1,0,0,0,23,200,1,0,0,
        0,25,205,1,0,0,0,27,212,1,0,0,0,29,219,1,0,0,0,31,223,1,0,0,0,33,
        231,1,0,0,0,35,236,1,0,0,0,37,240,1,0,0,0,39,246,1,0,0,0,41,249,
        1,0,0,0,43,255,1,0,0,0,45,264,1,0,0,0,47,267,1,0,0,0,49,272,1,0,
        0,0,51,277,1,0,0,0,53,283,1,0,0,0,55,287,1,0,0,0,57,291,1,0,0,0,
        59,295,1,0,0,0,61,298,1,0,0,0,63,300,1,0,0,0,65,302,1,0,0,0,67,304,
        1,0,0,0,69,306,1,0,0,0,71,308,1,0,0,0,73,310,1,0,0,0,75,313,1,0,
        0,0,77,316,1,0,0,0,79,319,1,0,0,0,81,321,1,0,0,0,83,324,1,0,0,0,
        85,326,1,0,0,0,87,329,1,0,0,0,89,333,1,0,0,0,91,335,1,0,0,0,93,337,
        1,0,0,0,95,339,1,0,0,0,97,341,1,0,0,0,99,343,1,0,0,0,101,350,1,0,
        0,0,103,361,1,0,0,0,105,363,1,0,0,0,107,368,1,0,0,0,109,376,1,0,
        0,0,111,382,1,0,0,0,113,388,1,0,0,0,115,390,1,0,0,0,117,119,3,3,
        1,0,118,120,3,5,2,0,119,118,1,0,0,0,119,120,1,0,0,0,120,122,1,0,
        0,0,121,123,3,7,3,0,122,121,1,0,0,0,122,123,1,0,0,0,123,2,1,0,0,
        0,124,126,7,0,0,0,125,124,1,0,0,0,126,127,1,0,0,0,127,125,1,0,0,
        0,127,128,1,0,0,0,128,4,1,0,0,0,129,133,5,46,0,0,130,132,7,0,0,0,
        131,130,1,0,0,0,132,135,1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,0,
        134,6,1,0,0,0,135,133,1,0,0,0,136,138,7,1,0,0,137,139,7,2,0,0,138,
        137,1,0,0,0,138,139,1,0,0,0,139,141,1,0,0,0,140,142,7,0,0,0,141,
        140,1,0,0,0,142,143,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,
        8,1,0,0,0,145,149,5,34,0,0,146,148,3,109,54,0,147,146,1,0,0,0,148,
        151,1,0,0,0,149,150,1,0,0,0,149,147,1,0,0,0,150,152,1,0,0,0,151,
        149,1,0,0,0,152,153,5,34,0,0,153,154,6,4,0,0,154,10,1,0,0,0,155,
        159,5,34,0,0,156,158,3,109,54,0,157,156,1,0,0,0,158,161,1,0,0,0,
        159,160,1,0,0,0,159,157,1,0,0,0,160,164,1,0,0,0,161,159,1,0,0,0,
        162,165,3,103,51,0,163,165,5,0,0,1,164,162,1,0,0,0,164,163,1,0,0,
        0,165,166,1,0,0,0,166,167,6,5,1,0,167,12,1,0,0,0,168,172,5,34,0,
        0,169,171,3,109,54,0,170,169,1,0,0,0,171,174,1,0,0,0,172,173,1,0,
        0,0,172,170,1,0,0,0,173,175,1,0,0,0,174,172,1,0,0,0,175,176,3,113,
        56,0,176,177,6,6,2,0,177,14,1,0,0,0,178,181,3,17,8,0,179,181,3,19,
        9,0,180,178,1,0,0,0,180,179,1,0,0,0,181,16,1,0,0,0,182,183,5,116,
        0,0,183,184,5,114,0,0,184,185,5,117,0,0,185,186,5,101,0,0,186,18,
        1,0,0,0,187,188,5,102,0,0,188,189,5,97,0,0,189,190,5,108,0,0,190,
        191,5,115,0,0,191,192,5,101,0,0,192,20,1,0,0,0,193,194,5,110,0,0,
        194,195,5,117,0,0,195,196,5,109,0,0,196,197,5,98,0,0,197,198,5,101,
        0,0,198,199,5,114,0,0,199,22,1,0,0,0,200,201,5,98,0,0,201,202,5,
        111,0,0,202,203,5,111,0,0,203,204,5,108,0,0,204,24,1,0,0,0,205,206,
        5,115,0,0,206,207,5,116,0,0,207,208,5,114,0,0,208,209,5,105,0,0,
        209,210,5,110,0,0,210,211,5,103,0,0,211,26,1,0,0,0,212,213,5,114,
        0,0,213,214,5,101,0,0,214,215,5,116,0,0,215,216,5,117,0,0,216,217,
        5,114,0,0,217,218,5,110,0,0,218,28,1,0,0,0,219,220,5,118,0,0,220,
        221,5,97,0,0,221,222,5,114,0,0,222,30,1,0,0,0,223,224,5,100,0,0,
        224,225,5,121,0,0,225,226,5,110,0,0,226,227,5,97,0,0,227,228,5,109,
        0,0,228,229,5,105,0,0,229,230,5,99,0,0,230,32,1,0,0,0,231,232,5,
        102,0,0,232,233,5,117,0,0,233,234,5,110,0,0,234,235,5,99,0,0,235,
        34,1,0,0,0,236,237,5,102,0,0,237,238,5,111,0,0,238,239,5,114,0,0,
        239,36,1,0,0,0,240,241,5,117,0,0,241,242,5,110,0,0,242,243,5,116,
        0,0,243,244,5,105,0,0,244,245,5,108,0,0,245,38,1,0,0,0,246,247,5,
        98,0,0,247,248,5,121,0,0,248,40,1,0,0,0,249,250,5,98,0,0,250,251,
        5,114,0,0,251,252,5,101,0,0,252,253,5,97,0,0,253,254,5,107,0,0,254,
        42,1,0,0,0,255,256,5,99,0,0,256,257,5,111,0,0,257,258,5,110,0,0,
        258,259,5,116,0,0,259,260,5,105,0,0,260,261,5,110,0,0,261,262,5,
        117,0,0,262,263,5,101,0,0,263,44,1,0,0,0,264,265,5,105,0,0,265,266,
        5,102,0,0,266,46,1,0,0,0,267,268,5,101,0,0,268,269,5,108,0,0,269,
        270,5,115,0,0,270,271,5,101,0,0,271,48,1,0,0,0,272,273,5,101,0,0,
        273,274,5,108,0,0,274,275,5,105,0,0,275,276,5,102,0,0,276,50,1,0,
        0,0,277,278,5,98,0,0,278,279,5,101,0,0,279,280,5,103,0,0,280,281,
        5,105,0,0,281,282,5,110,0,0,282,52,1,0,0,0,283,284,5,101,0,0,284,
        285,5,110,0,0,285,286,5,100,0,0,286,54,1,0,0,0,287,288,5,110,0,0,
        288,289,5,111,0,0,289,290,5,116,0,0,290,56,1,0,0,0,291,292,5,97,
        0,0,292,293,5,110,0,0,293,294,5,100,0,0,294,58,1,0,0,0,295,296,5,
        111,0,0,296,297,5,114,0,0,297,60,1,0,0,0,298,299,5,43,0,0,299,62,
        1,0,0,0,300,301,5,45,0,0,301,64,1,0,0,0,302,303,5,42,0,0,303,66,
        1,0,0,0,304,305,5,47,0,0,305,68,1,0,0,0,306,307,5,37,0,0,307,70,
        1,0,0,0,308,309,5,61,0,0,309,72,1,0,0,0,310,311,5,61,0,0,311,312,
        5,61,0,0,312,74,1,0,0,0,313,314,5,33,0,0,314,315,5,61,0,0,315,76,
        1,0,0,0,316,317,5,60,0,0,317,318,5,45,0,0,318,78,1,0,0,0,319,320,
        5,60,0,0,320,80,1,0,0,0,321,322,5,60,0,0,322,323,5,61,0,0,323,82,
        1,0,0,0,324,325,5,62,0,0,325,84,1,0,0,0,326,327,5,62,0,0,327,328,
        5,61,0,0,328,86,1,0,0,0,329,330,5,46,0,0,330,331,5,46,0,0,331,332,
        5,46,0,0,332,88,1,0,0,0,333,334,5,40,0,0,334,90,1,0,0,0,335,336,
        5,41,0,0,336,92,1,0,0,0,337,338,5,91,0,0,338,94,1,0,0,0,339,340,
        5,93,0,0,340,96,1,0,0,0,341,342,5,44,0,0,342,98,1,0,0,0,343,347,
        7,3,0,0,344,346,7,4,0,0,345,344,1,0,0,0,346,349,1,0,0,0,347,345,
        1,0,0,0,347,348,1,0,0,0,348,100,1,0,0,0,349,347,1,0,0,0,350,351,
        5,35,0,0,351,352,5,35,0,0,352,356,1,0,0,0,353,355,8,5,0,0,354,353,
        1,0,0,0,355,358,1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,359,
        1,0,0,0,358,356,1,0,0,0,359,360,6,50,3,0,360,102,1,0,0,0,361,362,
        5,10,0,0,362,104,1,0,0,0,363,364,5,13,0,0,364,365,1,0,0,0,365,366,
        6,52,3,0,366,106,1,0,0,0,367,369,7,6,0,0,368,367,1,0,0,0,369,370,
        1,0,0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,372,1,0,0,0,372,373,
        6,53,3,0,373,108,1,0,0,0,374,377,3,111,55,0,375,377,8,7,0,0,376,
        374,1,0,0,0,376,375,1,0,0,0,377,110,1,0,0,0,378,379,5,92,0,0,379,
        383,7,8,0,0,380,381,5,39,0,0,381,383,5,34,0,0,382,378,1,0,0,0,382,
        380,1,0,0,0,383,112,1,0,0,0,384,385,5,92,0,0,385,389,8,8,0,0,386,
        387,5,39,0,0,387,389,8,9,0,0,388,384,1,0,0,0,388,386,1,0,0,0,389,
        114,1,0,0,0,390,391,9,0,0,0,391,392,6,57,4,0,392,116,1,0,0,0,18,
        0,119,122,127,133,138,143,149,159,164,172,180,347,356,370,376,382,
        388,5,1,4,0,1,5,1,1,6,2,6,0,0,1,57,3
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NUMBER_LITERAL = 1
    STRING_LITERAL = 2
    UNCLOSE_STRING = 3
    ILLEGAL_ESCAPE = 4
    BOOLEAN_LITERAL = 5
    TRUE = 6
    FALSE = 7
    NUMBER = 8
    BOOLEAN = 9
    STRING = 10
    RETURN = 11
    VAR = 12
    DYNAMIC = 13
    FUNC = 14
    FOR = 15
    UNTIL = 16
    BY = 17
    BREAK = 18
    CONTINUE = 19
    IF = 20
    ELSE = 21
    ELIF = 22
    BEGIN = 23
    END = 24
    NOT = 25
    AND = 26
    OR = 27
    PLUS = 28
    MINUS = 29
    MULTIPLY = 30
    DIVIDE = 31
    MODULO = 32
    EQUAL_NUMBER = 33
    EQUAL_STRING = 34
    NOT_EQUAL = 35
    ASSIGN = 36
    LESS_THAN = 37
    LESS_THAN_OR_EQUAL = 38
    GREATER_THAN = 39
    GREATER_THAN_OR_EQUAL = 40
    CONCAT = 41
    OPEN_ROUND_BRACKET = 42
    CLOSE_ROUND_BRACKET = 43
    OPEN_SQUARE_BRACKET = 44
    CLOSE_SQUARE_BRACKET = 45
    COMMA = 46
    IDENTIFIER = 47
    COMMENT = 48
    NEWLINE = 49
    CARRIAGE_RETURN = 50
    WHITESPACE = 51
    ERROR_CHAR = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'true'", "'false'", "'number'", "'bool'", "'string'", "'return'", 
            "'var'", "'dynamic'", "'func'", "'for'", "'until'", "'by'", 
            "'break'", "'continue'", "'if'", "'else'", "'elif'", "'begin'", 
            "'end'", "'not'", "'and'", "'or'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'='", "'=='", "'!='", "'<-'", "'<'", "'<='", "'>'", 
            "'>='", "'...'", "'('", "')'", "'['", "']'", "','", "'\\n'", 
            "'\\r'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER_LITERAL", "STRING_LITERAL", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", 
            "BOOLEAN_LITERAL", "TRUE", "FALSE", "NUMBER", "BOOLEAN", "STRING", 
            "RETURN", "VAR", "DYNAMIC", "FUNC", "FOR", "UNTIL", "BY", "BREAK", 
            "CONTINUE", "IF", "ELSE", "ELIF", "BEGIN", "END", "NOT", "AND", 
            "OR", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", "EQUAL_NUMBER", 
            "EQUAL_STRING", "NOT_EQUAL", "ASSIGN", "LESS_THAN", "LESS_THAN_OR_EQUAL", 
            "GREATER_THAN", "GREATER_THAN_OR_EQUAL", "CONCAT", "OPEN_ROUND_BRACKET", 
            "CLOSE_ROUND_BRACKET", "OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", 
            "COMMA", "IDENTIFIER", "COMMENT", "NEWLINE", "CARRIAGE_RETURN", 
            "WHITESPACE", "ERROR_CHAR" ]

    ruleNames = [ "NUMBER_LITERAL", "INTERGER_PART", "DECIMAL_PART", "EXPONENT_PART", 
                  "STRING_LITERAL", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", 
                  "BOOLEAN_LITERAL", "TRUE", "FALSE", "NUMBER", "BOOLEAN", 
                  "STRING", "RETURN", "VAR", "DYNAMIC", "FUNC", "FOR", "UNTIL", 
                  "BY", "BREAK", "CONTINUE", "IF", "ELSE", "ELIF", "BEGIN", 
                  "END", "NOT", "AND", "OR", "PLUS", "MINUS", "MULTIPLY", 
                  "DIVIDE", "MODULO", "EQUAL_NUMBER", "EQUAL_STRING", "NOT_EQUAL", 
                  "ASSIGN", "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", 
                  "GREATER_THAN_OR_EQUAL", "CONCAT", "OPEN_ROUND_BRACKET", 
                  "CLOSE_ROUND_BRACKET", "OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", 
                  "COMMA", "IDENTIFIER", "COMMENT", "NEWLINE", "CARRIAGE_RETURN", 
                  "WHITESPACE", "CHARACTERS_IN_STRING", "LEGAL_ESCAPE_CHARS", 
                  "ILLEGAL_ESCAPE_CHARS", "ERROR_CHAR" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[4] = self.STRING_LITERAL_action 
            actions[5] = self.UNCLOSE_STRING_action 
            actions[6] = self.ILLEGAL_ESCAPE_action 
            actions[57] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRING_LITERAL_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

            	self.text = self.text[1:-1];

     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:

            	raise UncloseString(self.text[1:].replace('\r\n', '\n'));

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

            	raise IllegalEscape(self.text[1:]);

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            raise ErrorToken(self.text)
     


